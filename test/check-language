#!/usr/bin/python3
#
# Copyright (C) 2021 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program; If not, see <http://www.gnu.org/licenses/>.

from anacondalib import VirtInstallMachineCase, pixel_tests_ignore
from installer import Installer
from language import Language
from review import Review
from storage import Storage
from testlib import nondestructive, test_main  # pylint: disable=import-error


@nondestructive
class TestLanguage(VirtInstallMachineCase):

    def setUp(self):
        super().setUp()

        # Switching to a language might produce these messages, which seem to be harmless.
        self.allow_journal_messages("Error .* data: Connection reset by peer")

    def testOtherDefault(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m)
        lang = Language(b, m)

        # Set the language in the localization module to German before opening the page
        lang.dbus_set_language("de_DE.UTF-8")

        i.open()

        # Expect the backend set language to be preselected and the WebUI translated
        lang.check_selected_locale("de_DE")
        b.wait_in_text("h2 + h3", "Wählen Sie eine Sprache aus")

    def testBackendTranslations(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m)
        lang = Language(b, m)
        s = Storage(b, m)

        # BIOS boot /boot on ext4 / on xfs /home on btrfs
        disk = "/dev/vda"
        s.partition_disk(disk, [("1MiB", "biosboot"), ("1GB", "ext4"), ("10GiB", "xfs"), ("", "ext4")])

        # Two partitions on the same disk with the same UUID raise exception in
        # Blivet
        s.set_partition_uuid(disk, 3, "66f47a35-b00e-4341-8f31-f4855fac24a2")
        s.set_partition_uuid(disk, 4, "66f47a35-b00e-4341-8f31-f4855fac24a2")

        s.udevadm_settle()

        i.open()
        lang.select_locale("de_DE")
        lang.check_selected_locale("de_DE")
        i.reach(i.steps.INSTALLATION_METHOD)

        # Clean up the journal before we open Report dialog
        # (Report dialog presents all journal in a textarea)
        # to avoid crashing the test browser
        m.execute("journalctl --rotate; journalctl --vacuum-time=1s")

        s.rescan_disks(expect_failure=True)

        b.wait_in_text(
            "#critical-error-bz-report-modal.pf-v5-c-modal-box",
            "In diesem Fall können Sie entweder eines der Geräte trennen oder es neu formatieren.")

    def testLanguageSwitching(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m)
        l = Language(b, m)

        i.open()

        # Expect the default language - this is en at this point - adjust the test when better guess is implemented
        b.wait_in_text("h2", "Welcome to Fedora Linux")

        l.check_selected_locale("en_US")

        # Assert that search bar starts empty.
        assert l.get_locale_search() == ""
        # b.wait_visible(f".{i.steps.WELCOME}-menu.pf-m-invalid")

        # Check that the language menu shows all menu entries when clicking the toggle button
        l.locale_option_visible('en_US')
        l.locale_option_visible('de_DE')
        l.locale_option_visible('cs_CZ')

        # Check filtering on English names
        l.input_locale_search('cze')
        l.locale_option_visible('en_US', False)
        l.locale_option_visible('de_DE', False)
        l.locale_option_visible('cs_CZ')

        # Check filtering on native names
        l.input_locale_search('Deutsch')
        l.locale_option_visible('en_US', False)
        l.locale_option_visible('de_DE')
        l.locale_option_visible('cs_CZ', False)
        l.input_locale_search('')

        # Select the 'German' language
        l.select_locale("de_DE")
        l.check_selected_locale("de_DE")

        # Pixel test the language step
        b.assert_pixels(
            "#app",
            "language-step-basic",
            # HACK pf-v5-c-menu__item-text is ignored because some of our CI infrastructure is
            # missing CJK and Cyrillic fonts..
            ignore=[*pixel_tests_ignore, ".pf-v5-c-menu__item-text"],
        )

        b.wait_in_text("h2 + h3", "Wählen Sie eine Sprache aus")
        # TODO: Add checks for plural translations when these are present

        # Check that the language is updated in the backend
        # TODO: Check that error messages from the backend show up translated
        language_new = l.dbus_get_language()
        self.assertIn('string "de_DE.UTF-8"', language_new)

        # Expect language direction to be set to RTL for selected languages
        l.select_locale("he_IL", False)
        l.check_selected_locale("he_IL")
        b.wait_attr("html", "dir", "rtl")

        # Expect language direction to be set to LTR when switching to EN_US from RTL language
        # as this has special handling
        l.select_locale("en_US")
        l.check_selected_locale("en_US")
        b.wait_attr("html", "dir", "ltr")

        l.select_locale("de_DE")
        l.check_selected_locale("de_DE")
        b.wait_attr("html", "dir", "ltr")

    def testUnknownLanguage(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m)
        l = Language(b, m)
        r = Review(b, m)

        i.open()
        # Set language to Macedonian that is now in the installer translated languages
        # Go to review page after it
        l.dbus_set_language("mk_MK.UTF-8")
        i.reach(i.steps.REVIEW)

        # test the macedonian language selected
        r.check_language("mk_MK.UTF-8")


if __name__ == '__main__':
    test_main()
