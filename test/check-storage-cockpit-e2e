#!/usr/bin/python3
#
# Copyright (C) 2025 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program; If not, see <http://www.gnu.org/licenses/>.

from anacondalib import VirtInstallMachineCase, pixel_tests_ignore, run_boot
from installer import Installer
from review import Review
from storage import Storage
from storagelib import StorageCase  # pylint: disable=import-error
from testlib import nondestructive, sit, test_main  # pylint: disable=import-error
from utils import pretend_live_iso


class TestStorageCockpitIntegration_E2E(VirtInstallMachineCase, StorageCase):
    @nondestructive
    def testSoftwareRAID(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m, scenario="use-configured-storage")
        s = Storage(b, m)
        r = Review(b, m)

        self.add_disk(10)
        self.add_disk(5)

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)
        s.rescan_disks(["vda", "vdb", "vdc"])
        s.select_disks([("vdb", True), ("vda", True), ("vdc", True)])

        s.modify_storage()
        s.confirm_entering_cockpit_storage()
        b.switch_to_frame("cockpit-storage")

        # Create BIOS and boot partitions on vdb
        self.click_dropdown(self.card_row("Storage", 1), "Create partition table")
        self.confirm()

        self.click_dropdown(self.card_row("Storage", 2), "Create partition")
        self.dialog({"size": 1, "type": "biosboot"})

        self.click_dropdown(self.card_row("Storage", 3), "Create partition")
        self.dialog({"size": 1070, "type": "ext4", "mount_point": "/boot"})

        # Create RAID1 on vda
        self.click_dropdown(self.card_header("Storage"), "Create MDRAID device")
        self.dialog_wait_open()
        self.dialog_set_val("level", "raid1")
        self.dialog_set_val("disks", {"vda": True, "vdb": True, "vdc": True})
        self.dialog_set_val("name", "SOMERAID")
        self.dialog_apply()
        self.dialog_wait_close()
        b.wait_visible(self.card_row("Storage", name="/dev/md/SOMERAID"))

        # Create and mount the RAID device partition as /
        self.click_dropdown(self.card_row("Storage", 7), "Create partition table")
        self.dialog({"type": "gpt"})

        self.click_dropdown(self.card_row("Storage", 8), "Create partition")
        self.dialog({"type": "ext4", "mount_point": "/"})

        # Exit the cockpit-storage iframe and return to installation
        b.switch_to_top()
        s.return_to_installation()
        # s.return_to_installation_confirm()

        sit()

if __name__ == '__main__':
    test_main()
